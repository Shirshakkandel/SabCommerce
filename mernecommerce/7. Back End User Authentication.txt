                # 1)Clean Up By using Controller 


 routes/productRoutes.js we have put functionality directly in routes.
 controller handle functionality

     controller /prodcuctController.js

import asyncHandler from 'express-async-handler'
import Product from '../models/productModel.js'

const getProducts = asyncHandler(async(req,res)=> {
    const products = await Product.find({})
    res.json(products)
})

const getProductById = asyncHandler(async(req,res)=> {
    const product= await Product.findById('req.params.id')
    if(product) {res.json(product)} else{res.status(404); throw new Error(`Product not Found` )}  
})
export {getProductById,getProducts}

        routes/productRoutes.js

import express from 'express'
const router = express.Router()
import {getProducts,getProductById} from '../controller/productcontroller.js'

router.get('/', getProducts)
router.route('/:id').get(getProductById)
export default router

        backend/server.js

import productRoutes from './routes/productRoutes.js'
app.use('/api/products',productRoutes)


            # 2)User Authentication Endpoint

    controller/userController.js
import asyncHandler from 'express-async-handler'
import User from '../models/productModel.js'
    # We get our body data from req.body which is in json to pass we have to add middleware in server.js
    # /server.js => app.use(express.json)
//@desc Auth user & get token
//@route Post/api/users/login
//@access Public
const authUser = asyncHandler(async(req,res)=> {
    const {email,password}= req.body
    # res.send({email,password})
    const user= await User.findOne({email})
     ## if user exits then we have to find if password match use bcryptjs in model cause password is in hash in database
             # model/userModel.js  => under  userSchema
        userSchema.methods.matchPassword= async function(enterPassword) {
           return await bcrypt.compare(enterPassword, this.password)}
     ##
    if(user && (await user.matchPassword(password))){
        const {name,email,isAdmin}= user
       res.json({_id:user._id, name,email,isAdmin, token:null})
    } 
    else {res.status(401); throw new Error('Invalid email or Password')}
} 
export {authUser}


        #3)Brief Explanation of Jwt(Json web Tokens)

three diffrent parts(headers, payload(user_id),verify signature) basic authenticate we donot take token
Bearer Token(Authorization and add token)
npm i node-json


        #  4)Generate a Json web Tokens

    backend/utils/gernerateToken.js
import jwt from 'jsonwebtoken'
const gernerateToken = (id)=> {
    return jwt.sign({id}, process.env.JWT_SECRET, {expiresIn: '30d'})
} export default gernerateToken
#.env  JWT_SECRET= abc123
###   backend/controller/userController.js
 const authUser=asyncHandler(async(req,res)=> {
     const {email, password} = req.body
     const user = await User.findOne({email})
     if(user && user.matchPassword(password)){
        res.json({token:gernerateToken(user._id)})
     }})
 ######


            # 5)Custom Authentication Middleware

 # middleware/authMiddleware.js
import jwt from 'jsonwebtoken'
import User from '../models/userModel.js'
#token is send as headers=> Authorization=> Bearer token
const protect =asyncHandler(async(req,res,next)=> {
    let token
    # console.log(req.headers.authorization)
    if(req.headers.authorization && req.headers.authorization.startWith('Bearer')){
        try{token = req.headers.authorization.split(' ')[1]
        const decode = jwt.verify(token, process.env.JWT_SECRET)
        req.user= await User.findById(decode.id).select('-password')
        # req.user is aviable in all protect middleware route
        next()}
        catch(error){
            console.error(error); res.status(401); throw new Error('Not Authorized, token failed')
        }
    }  
})
#userRoutes.js => router.route('/profile').get(protect,getUserProfile)
export {protect}


#  controller/userController.js

 //@desc Get User profile
 //@route Get api/users/profile
 //@access Private

const getUserProfile = asyncHandler(async(req,res)=> {
     # userRoutes.js=> router.route('/profile').get(getUserProfile))
    # res.send('Success')
    const user = await User.findById(req.user._id)
    if(user){
        res.json({_id:user_id;name:user.name,email:user.email,isAdmin:user.isAdmin})   
    }else { res.status(404); throw new Error('User not Found')}
})

            6)Saving the Token in Postman  
go to login tab  => Tests
pm.environment.set("TOKEN", pm.response.json().token) => Save
when we again login and see env we see Token to use Token 
Go to api/user/profile Tab => Authorization => Token you will see Token


        # 7)User Registration and password Encryption

    #controller/userController.js
import User from '../models/UserModel.js'
const registerUser = asyncHandler((req,res)=> {
    const {email,password,name} = req.body
    const userExits = await User.findOne({email})
    if(userExits){res.status(401); throw new Error("Email is already available")}
    ### Encrypt the password by adding save middleware
    # models/userModel.js
    userSchema.pre('save', async function (next){
        if(!this.isModified('password')){next()}
        const salt = await bcrypt.genSalt(10)
        this.password= await bcrypt.hash(this.password, salt)
    })
    #########
    
    const user = await User.create({name,email, password})
    if(user){

        res.json({_id:user._id;name:user.name;email:user:email})}
})






 




