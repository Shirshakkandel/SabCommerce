                1)Morgan and Create review Endpoint  

npm i morgan ( find out http status method)
server.js
if(process.env.NODE_ENV==='development'){
app.use(morgan('dev')) //using morgan middleware
}

backend Model/productModel.js

const reviewSchema= mongoose.Schema(
{
name:{type:String, required:true},
rating:{type:Number,required,true},
comment:{type:String,required:true},
user:{
type:mongoose.Schema.Types.ObjectId,
required:true,
ref:"User",
}
},{
timeStamps:true,
})

<!-- //@desc Create new review -->
<!-- //@route POST /api/products/:id/reviews -->
<!-- //@access Private -->

controller/productController.js
const createProductReview = asyncHandler(async(req,res)=> {
const {rating,comment} = req.body
const product = await Product.findById(req.params.id)

    if(product){
        const alreadyReviewed = product.reviews.find(r=> r.user.toString()===req.user._id.toString())
        if(alreadyReviewed) {
            res.status(400)
            throw new Error('Product already reviewed')
        }

        const review = {
            name:req.user.name,
            rating:NUMBER(rating),
            comment,
            user:req.user._id
        }

        product.reviews.push(review)
        product.numReviews= product.reviews.length
        productf.rating= product.reviews.reduce((acc,item)=> item.rating+acc, 0)/products.reviews.length
        await product.save()
        res.status(201).json({message:"Review added"})
    }})

    const AddTocart= (asyncHandler())

            2)FrontEnd product reviews  

action/productAction.js
export const createProductReview = (productId, review)=> async(dispatch,getState)=> {
const {userLogin: {userInfo}} = getstate()
try{

# const config= {headers:{'Content-Type:"application/json", Authorization:"Bearer ${userInfo.token}"'}}

# await axios.post('/api/products/${productId}', review, config)}

Screen/ProductScreen.js
const submitHandler=(e)=> {
e.preventDefault()
dispatch(createProductReview(match.param.id, {rating,comment}))
}

useEffect(()=> {
if(successReview){
alert("Review added"); setReview(0); setCommet('');
dispatch({type:PRODUCT_CREATE_REVIEW_RESET})

    }

})

            3)Product Search     

components/SearchBox.js
import {Form,Button} from 'react-bootstrap'
const SearchBox= ({history})=> {
const [keyword,setKeyword]= useState('')

    const SearchBox= ({history})=> {
        e.preventDefault()
        if(keyword.trim()){
            history.push('/search${keyword}')
        }else {
            history.push('/')
        }
    }
    return(
        <Form onSubmit={submitHandler} inline>
        <Form.Control type="text" name="q" onChange={e=> setKeyword(e.target.value)}>
        <Form/>
    )}

App.js
<Route path="/search/:keyword" component={HomeScreen}>

Screen/HomeScreen.js > Header.js
import Route from 'react-router-dom'
# <SearchBox/>
<Route render={({history})=> <SearchBox history={history}>}>

Screen/HomeScreen.js
const HomeScreen = ({match})=> {
    const keyword= match.params.keyword

    useEffect(()=> {
        dispatch(listProducts(keyword))
    },[dispatch,keyword])}

actions/productAction.js
export const listProducts= (keyword ="")=> async (dispatch)=> {
    try{
        const {data}= await axios.get('/api/product?keyword=${keyword}')
    }}

constroller/productController.js
//@desc  fetch all products
//@route GEt /api/products
//@access Public

const getProducts = asyncHandler(async(req,res)=> {
    const keyword= req.query.keyword ? {
        name:{
            $regex:req.query.keyword,
            $options:'i'
        }
    }:{}

    const products= await Product.find({...keyword})
    res.json(products)
})

            4)Product Pagination     
controller/productController.js 
const getProducts=asyncHandler(async(req,res)=> {
    const pageSize=2
    const page=Number(req.query.pageNumber) || 1
    const count = await Product.countDocuments({...keyword})
    const products= await Product.find({...keyword}).limit(pageSize).skip(pageSize *(page-1))
    res.json(products,page,pages:Math.ceil(count/pageSize))
})

action/productAction.js
export const listProducts=(keyword="",pageNumber="")=> async(dispatch)=> {
    try{
        const {data}= await axios.get('/api/products?keyword=${keyword}&pageNumber=${pageNumber}')

    }
}

reducer/ProductReducer.js

export const productListReducer= (state={products:[]}, action)=> {
    switch(action.payload){
        case PRODUCT_LIST_SUCESS:
        return{loading:false,products:action.payload.products, pages:action.payload.pages,page:action.payload.pages}
    }
}

App.js
<Route path='/page/:pageNumber' comment={HomeScreen} exact />
<Route path="/search/:keyword/page/:pageNumber" component={HomeScreen} exact/> 

Screen/HomeScreen.js
const HomeScreen=({match})=> {
    const pageNumber=match.params.pageNumber || 1
    useEffect(()=> {
        dispatch(listProducts(keyword,pageNumber))
    },[dispatch,keyword,pageNumber])
}

component/Paginate.js
import {Pagination} from 'react-bootstrap'
import {LinkContainer} from 'react-router-bootstrap'

const Paginate=({page,pages,isAdmin=false,keyword=""})=> {
    return pages > 1 && (
        <Pagination>
         {[...Array(pages).keys()].map(x)=>(
             <LinkContainer key= {x+1} to={keyword ? '/search/${keyword}/page/${x+1}':/page/${x+1}'>
             <Pagination.Item active={x+1 ===page}>{x+1}</Pagination.Item>
             </LinkContainer>
         )}
        </Pagination>
    )}

Screen/HomeScreen.js

const productList= useSelector(state=> state.productList)
const {loading,error,products,page,pages}= productList
useEffect(()=> {
    dispatch(listProducts(keyword,pageNumber))
},[dispatch,keyword,pageNumber])

<Pagination pages={pages} page={page} keyword={keyword ? keyword :''}>


                5)Top Product Carousel  
controller/productController.js
//@desc Get top rated products
//@desc Get /api/products/top
//@access Public

const getTopProducts= asyncHandler(async(req,res)=> {
    const product= await Product.find({}).sort({rating:-1}).limit(3)
    res.json(products)
})

routes/productRoutes.js
router.get('/top', getTopProducts)

action/productAction.js
const {data} = await axios.get('/api/products/top')

component/ProductCarousel.js
import {Link} from 'react-router-dom'
import {Carousel, Image} from 'react-bootstrap'
import {listTopProducts} from '../actions/productActions'

const ProductCarousel =()=> {
    const dispatch= useDispatch()
    const productTopRated= useState(state=> state.productTopRated)
    const {loading, error, products} = productTopRated
    useEffect(()=> {
        dispatch(listTopProducts())
    }, [])

    return (
        <Carousel pause="hover"  className="bg-dark">
        {product.map(product=> (
            <Carousel.Item></Carousel.Item>
        ))}
        </Carousel>
    )
}

Screen/HomeScreen.js
retuern (
    {!keyword && <ProductCarousel/>}
)

index.css

                6)Custom Page Titles and Meta 
cd frontend npm i react-helmet
Screen/HomeScreen.js
import {Helmet} from 'react-helmet'
return(
    <Helmet>
    <title>Welcome to Proshop</title>
    <meta name="description" content=""/>
    <meta name="keywords" content=""/>
    </Helmet>
)

Meta.js



 