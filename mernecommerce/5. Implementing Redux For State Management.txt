1)Overview 
authentication of user in global state, shopping cart, state is change is with reducer function
that recieve action and by action.type in switch we change our state

             2)Create redux store 

# npm i redux redux-react redux-thunk redux-devtools-extension 
                            store.js   
# we have many reducer and we have to combine it. 

import {createStore,combineReducer,applyMiddleware} from 'redux'
import thunk from 'redux-thunk'
import {composeWithDevTools} from 'redux-devtools-extension'

const reducer= combineReducer({})
const initialState= {}
const middleware = [thunk]

export const store= createStore(reducer, initialState,composeWithDevTools(applyMiddleware(...middleware)))

                          index.js    
import store from './store'

<Provider store={store}>
<App/>
</Provider>


                        3)Product List Reducer and Action   
reducers/productReducer.js

we will evaluate action.type in switch 3 different case(request,list,fail)

export const productListReducer= (state={products:[]}, action)=> {
 switch(action.type){
     //case 'PRODUCT_LIST_REQUEST':
     casr PRODUCT_LIST_REQUEST

     return {loading:true,products:[]}

      case:"PRODUCT_LIST_SUCCESS":
     return {loading:false, products:action.payload}

     case:"PRODUCT_LIST_FAIL":
     return {loading:false, error:action.payload}

     default:
     return state
 }
}

   /store.js
const reducer= combineReducer({productList:productListReducer})

     constant/productConstant.js
export const PRODUCT_LIST_REQUEST= 'PRODUCT_LIST_REQUEST'


actions/productActions.js
thunk use two arrow
export const listProducts= ()=> async(dispatch) => {
    try{
        dispatch({type:"PRODUCT_LIST_REQUEST"})
        const {data} = await axios.get('/api/products')
        
        dispatch({
            type:"PRODUCT_LIST_SUCCESS"
            payload:data
        })
    }catch(error){
        dispatch({type:"PRODUCT_LIST_FAIL", payload:error.response && error.response.data.message ? error.reponse.data.message : error.message })
    }
}



                    4)Bringing Redux into HomeScreen   
HomeScreen.js
import {useDispatch,useSelector} from 'react-redux'

const HomeScreen = ()=> {
    const dispatch= useDispatch()
    const productList= useSelector(state=> state.productList)
    const {error,loading, products}= productList
   
    useEffect(()=> {
        dispatch(listProducts())
    }, [dispatch])
}


                        5)Message and Loader   

Loader.js
import {Spinner} from 'react-bootstrap'
const Loader= ()=> {
    return (
        <Spinner animation="border" role="status" style={{width:"100px", height:"100px", margin:"auto", display:"block"}}>span.sr-only{Loading}<Spinner>
    )
}


        6)Product Details Reducer and Action   
productReducer.js
export const productDetailReducer= (state={product:{reviews:[]}}, action)=> {
    switch(action.type){
        case "PRODUCT_DETAILS_REQUEST":
        return {loading:true, ...state}

        case "PRODUCT_DETAILS_SUCCESS":
        return {loading:false, product: action.payload}

        case "PRODUCT_DETAILS_FAIL":
        return {loading:false, error:action.payload}

        default:
        return state
    }
}

     /store.js
import {productListReducer,productDetailReducer} from './reducers'
const reducer= combineReducer({
    productList:productListReducer,
    prodcutDetail:productDetailReducer,
})

     action/productActions.js

export const listProductDetails= (id)=> async(dispatch)=> {
    try{
        dispatch({type:"PRODUCT_DETAILS_REQUEST"})
        const {data} = await axios.get(`/api/products/${id}`)

        dispatch({
            type:"PRODUCT_DETAIL_SUCCESS"
            payload:data,
        })
       

    }catch(error){
        dispatch({type:"PRODUCT_DETAILS_FAIL", paylod:error.response && error.response.data.message ? error.resposne.data.message : error.message})
    }
}


        screens/ProductScreen.jsx
const {useDispatch, useSelector} from 'react-redux'

const ProductScreen= ({match})=> {
    const dispatch= useDispatch()
    const productDetails = useSelector(state=> state.productDetails)
    const {loading,error,product} =productDetail;

    #without redux implementation
    async function listProductDetails(id){
        setLoading(true)
        try{
            const {data} = await axios.get(`api/product/${id}`)
            setProduct(data)
            setLoading(false)   
        }catch(error){
            setLoading(false)
            const error=error.response && error.response.data.message ? error.response.data.message: error.message
            setError(error)
        }
    }
    ######

    useEffect(()=> {
        dispatch(listProductDetails(match.param.id))
        #listProductDetails(match.param.id)
    }, [dispatch, match])
}