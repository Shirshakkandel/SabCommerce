
                1)Qty Select & Add to Cart Button
    screen/ProductScreen.jsx

import {useDispatch, useSelector} from 'react-redux'
const ProductScreen = ({match,history})=> {
    const dispatch= useDispatch()
    const productDetail= useSelector(state=> state.productDetail)
    const {error,loading,product} = productDetail
    const [qty, setQty]= usestate(0)

    function addToCartHandler(){
        history.push(`/cart/${match.params.id}?qty=${qty}`)
    }

    return (
        {product.countInStock > 0 && (
            <ListGroup.Item>
            <Row>
            <Col>
            <Form.Control as="select" value={qty} onChange={e=> setQty(e.target.value)}>
            # [0,1,2,3,4] if countInStock is 5
            {[...Array(product.countInStock).keys()].map(x=>(
                <option key={x+1} value={x+1}>{x+1}</option>
            ))}
            <Form.Control>
            </Col>
            <Row>
            <ListGroup.Item>
        )}
    )
}

App.js  
<Route path='/cart/:id?' component={CartScreen}>

   screen/CartScreen.jsx  

                2)Cart Reducer and Add to Cart Action

   reducer/CartReducers.js
export const cartReducer= (state={cartItems:[]}, action )=> {
    switch(action.type){
        case CART_ADD_ITEM:
        const item= action.payload
        const existItem= state.cartItems.find(x=> x.product === item.product)
        if(existItem){
            #if exitsItem then update exitsItem with new item(mainly new Qty) otherwise donot change
            return {
                ...state,
                cartItems:state.cartItems.map(x=> x.product === existItem.product ? item : x)
            }
        }else {
            #if not exitsItem then add new item
            return {...state, cartItems:[...state.cartItems, item]}}
        default:
        return state
    }
}

    action/cartActions.js

export const addToCart = (id,qty)=> async(dispatch)=> {
    const {data}= await axios.get(`/api/product/${id}`)

    dispatch({type:"ADD_TO_CART", payload:{product:data._id, name:data.name, image:data.image,price:data.price,countInStock:data.countInStock, qty})

    localStorage.setItem('cartItems', JSON.stringfy(getState().cart.cartItems))
}

//store.js

const cartItemsFromStorage= localStorage.getItem('cartItems') ? JSON.parse(localStorage.getItem('cartItems')):[]

const initialState={ cart:{cartItems:cartItemsFromStorage}}

      //CartScreen.js
import {useEffect} from 'react'
import {useDispatch, useSelector} from 'react-redux'
import {Row,Col,ListGroup,Image,Form,Button,Card} from 'react-boostrap'
import {addToCart, removeFromCart} from '../action/cartActions'

const CartScreen = ({match,location,history})=> {
    const productId= match.params.id
    const qty= location.search ? Number(location.search.split("=")[1]): 1
    # console.log(location.search) => ?qty=1
    const dispatch= useDispatch()

    useEffect(()=> {
        if(productId){
            dispatch(addToCart(qty,prodcutId))
        }
    },[dispatch,qty,productId]) }



        4)CartScreen.js
<h2> Subtotal ({cartItems.reduce((acc,item)=> acc+item.qty, 0)}) </h2>
${cartItems.reduce((acc,item)=> acc+item.qty*item.price, 0).toFixed(2)}



                5)Remove Items from Cart
reducer/cartReducer
 switch(action.type){
        case CART_ADD_ITEM:
        const item= action.payload
        const existItem= state.cartItems.find(x=> x.product === item.product)

        if(existItem){
            return {
                ...state,
                cartItems:state.cartItems.map(x=> x.product === existItem.product ? item : x)
            }
        } else {
            return {
                ...state, cartItems:[...state.cartItems, item]
            }
        }

        case "CART_REMOVE_ITEM":
        return {
            ...state,
            cartItems:state.cartItems.filter(x=> x.product != action.payload)
        }
        default:
        return state
    }

action/action
export const removeFromCart = (id)=> (dispatch, getState) {
    dispatch({
        type:"CART_REMOVE_ITEM",
        paylod:id,
    })
    localStorage.setItem('cartItems', JSON.stringfy(getState().cart.cartItems))

}